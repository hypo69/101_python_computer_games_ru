import google.generativeai as genai  # Импортируем библиотеку для работы с Gemini
import re  # Импортируем библиотеку для работы с регулярными выражениями

class GoogleGenerativeAI:
    """
    Класс для взаимодействия с моделями Google Generative AI.
    """

    MODELS = [
        "gemini-1.5-flash-8b",
        "gemini-2-13b",
        "gemini-3-20b"
    ]

    def __init__(self, api_key: str, system_instruction: str, model_name: str = "gemini-2.0-flash-exp"):
        """
        Инициализация модели GoogleGenerativeAI.

        Args:
            api_key: Ключ API для доступа к Gemini.
            system_instruction: Инструкция для модели (системный промпт).
            model_name: Название используемой модели Gemini.
        """
        self.api_key = api_key
        self.model_name = model_name
        genai.configure(api_key=self.api_key)  # Конфигурируем библиотеку с API ключом
        self.model = genai.GenerativeModel(model_name=self.model_name, system_instruction=system_instruction)  # Инициализируем модель с инструкцией

    def ask(self, q: str) -> str:
        """
        Отправляет запрос модели и возвращает ответ.

        Args:
            q: Текст запроса.

        Returns:
            Ответ модели или сообщение об ошибке.
        """
        try:
            response = self.model.generate_content(q)  # Отправляем запрос модели
            return response.text  # Возвращаем текстовый ответ
        except Exception as ex:
            return f"Error: {str(ex)}"  # Обрабатываем и возвращаем ошибку

# Инструкции для Gemini (системные промпты)
system_instruction_asterisk = """
Ты — генератор текстовых баннеров. Твоя задача — создать текстовый баннер из введённого текста.

Правила:

1. Используй символ '*' для оформления баннера.
2. Верхняя и нижняя границы баннера должны быть оформлены символами '*'.
3. Текст должен быть окружён рамкой из символов '*'.
4. Пример оформления:
   *********
   * Текст *
   *********
5. Не добавляй никаких дополнительных пояснений, просто возвращай оформленный баннер.
"""

system_instruction_tilde = """
Ты — генератор текстовых баннеров. Твоя задача — создать текстовый баннер из введённого текста.

Правила:

1. Используй символ '~' для оформления баннера.
2. Верхняя и нижняя границы баннера должны быть оформлены символами '~'.
3. Текст должен быть окружён рамкой из символов '~'.
4. Пример оформления:
   ~~~~~~~~
   ~ Текст ~
   ~~~~~~~~
5. Не добавляй никаких дополнительных пояснений, просто возвращай оформленный баннер.
"""

system_instruction_hash = """
Ты — генератор текстовых баннеров. Твоя задача — создать текстовый баннер из введённого текста.

Правила:

1. Используй символ '#' для оформления баннера.
2. Верхняя и нижняя границы баннера должны быть оформлены символами '#'.
3. Текст должен быть окружён рамкой из символов '#'.
4. Пример оформления:
   ########
   # Текст #
   ########
5. Не добавляй никаких дополнительных пояснений, просто возвращай оформленный баннер.
"""

# Основная часть программы
if __name__ == "__main__":
    API_KEY: str = input("Введите API ключ от `gemini`: ")  # Запрашиваем API ключ у пользователя

    # Приветствие пользователя
    print("Добро пожаловать в игру Banner!")
    print("Введите текст, и я создам для вас текстовый баннер.")

    # Выбор стиля оформления баннера
    print("Выберите стиль оформления баннера:")
    print("1. Символ '*'")
    print("2. Символ '~'")
    print("3. Символ '#'")
    choice = input("Введите номер стиля (1, 2 или 3): ")

    # Определяем системную инструкцию в зависимости от выбора пользователя
    if choice == "1":
        system_instruction = system_instruction_asterisk
    elif choice == "2":
        system_instruction = system_instruction_tilde
    elif choice == "3":
        system_instruction = system_instruction_hash
    else:
        print("Неверный выбор. Используется стиль по умолчанию '*'.")
        system_instruction = system_instruction_asterisk

    # Создаём экземпляр класса с выбранной инструкцией
    model = GoogleGenerativeAI(api_key=API_KEY, system_instruction=system_instruction)

    # Запрашиваем у пользователя текст
    user_text = input("Введите текст для баннера: ")

    # Проверяем, что текст не пустой
    if user_text.strip() == "":
        print("Вы не ввели текст. Попробуйте снова.")
    else:
        # Отправляем текст модели и получаем оформленный баннер
        response = model.ask(user_text)
        print("\nВаш баннер готов:")
        print(response)